import express, { Request, Response, NextFunction } from 'express';
import passport from 'passport';
import passportLocal from 'passport-local';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const app = express();
const LocalStrategy = passportLocal.Strategy;

// Set up middleware
app.use(express.json());

// Set up passport
passport.use(
  new LocalStrategy(async (username, password, done) => {
    try {
      // Find user by username in your database
      const user = await User.findOne({ username });

      if (!user) {
        return done(null, false, { message: 'Incorrect username.' });
      }

      // Check password
      const isMatch = await bcrypt.compare(password, user.password);

      if (!isMatch) {
        return done(null, false, { message: 'Incorrect password.' });
      }

      // User authenticated successfully
      return done(null, user);
    } catch (error) {
      return done(error);
    }
  })
);

// Initialize passport
app.use(passport.initialize());

// User model
interface User {
  username: string;
  password: string;
}

// Example user database (replace with your actual database logic)
const users: User[] = [];

// Routes
app.post('/login', passport.authenticate('local', { session: false }), (req, res) => {
  // Generate access token
  const accessToken = jwt.sign({ username: req.user.username }, 'secret', { expiresIn: '15m' });

  // Generate refresh token (store it in the database)
  const refreshToken = jwt.sign({ username: req.user.username }, 'refreshSecret');

  // Send tokens in response
  res.json({ accessToken, refreshToken });
});

app.post('/refresh-token', (req, res) => {
  const refreshToken = req.body.refreshToken;

  if (!refreshToken) {
    return res.status(401).json({ message: 'Refresh token is required.' });
  }

  // Verify refresh token
  jwt.verify(refreshToken, 'refreshSecret', (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Invalid refresh token.' });
    }

    // Generate new access token
    const accessToken = jwt.sign({ username: user.username }, 'secret', { expiresIn: '15m' });

    res.json({ accessToken });
  });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
